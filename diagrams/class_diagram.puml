@startuml

package "ROS2 Nodes" {
    interface INode {
        ~_init_member_variables()
        ~_init_ros_parameters()
        ~_init_publishers()
        ~_init_subscribers()
        ~_init_timers()
    }

    class YoloNode {
        + image_sub: Subscription<Image>
        + objective_coords_pub: Publisher<Point>
        + objective_coords_pub_timer: Timer
        + image_sub_callback(): void
        + objective_coords_pub_timer_callback(): void
    }
    class SlamNode {
        + odom_sub: Subscription<Odometry>
        + lidar_sub: Subscription<LaserScan>
        + grid_map_pub: Publisher<OccupancyGrid>
        + grid_map_pub_timer: Timer
        + odom_sub_callback(): void
        + lidar_sub_callback(): void
        + grid_map_pub_timer_callback(): void

    }
    class PpoNode {
        + odom_sub: Subscription<Odometry>
        + trajectory_sub: Subscription<Path>
        + cmd_vel_pub: Publisher<Twist>
        + cmd_vel_pub_timer: Timer
        + odom_sub_callback(): void
        + trajectory_sub_callback(): void
        + cmd_vel_pub_timer_callback(): void
    }

    class AStarNode {
        + grid_map_sub: Subscription<OccupancyGrid>
        + objective_coords_sub: Subscription<Point>
        + trajectory_pub: Publisher<Path>
        + trajectory_pub_timer: Timer
        + grid_map_sub_callback(): void
        + objective_coords_sub_callback(): void
        + trajectory_pub_timer_callback(): void
    }

    YoloNode --|> INode
    SlamNode --|> INode
    PpoNode --|> INode
    AStarNode --|> INode
}

package "Algorithm Handlers" {
    interface IYoloHandler {
        +get_objective_coords(Image): (bool, Point)
    }
    interface ISlamHandler {
        +get_grid_map(Odometry, LaserScan): OccupancyGrid
    }
    interface IPpoHandler {
        +get_cmd_vel(Odometry, Path): Twist
    }
    interface IAStarHandler {
        +get_trajectory(OccupancyGrid, Point): Path
    }

    class YoloHandler
    class SlamHandler
    class PpoHandler
    class AStarHandler

    YoloHandler --|> IYoloHandler
    SlamHandler --|> ISlamHandler
    PpoHandler --|> IPpoHandler
    AStarHandler --|> IAStarHandler

    IYoloHandler <-- YoloNode
    ISlamHandler <-- SlamNode
    IPpoHandler <-- PpoNode
    IAStarHandler <-- AStarNode

}

package "ML Algorithms" {
    class Yolo
    class Slam
    class Ppo
    class AStar

    interface IYolo {
        +get_objective_coords(ndarray): (bool, ndarray)
    }
    interface ISlam {
        +get_grid_map(ndarray, ndarray): ndarray
    }
    interface IPpo {
        +get_cmd_vel(ndarray, ndarray): ndarray
    }
    interface IAStar {
        +get_trajectory(ndarray, ndarray): ndarray
    }

    Yolo --|> IYolo
    Slam --|> ISlam
    Ppo --|> IPpo
    AStar --|> IAStar

    IYolo <-- YoloHandler
    ISlam <-- SlamHandler
    IPpo <-- PpoHandler
    IAStar <-- AStarHandler
}

@enduml